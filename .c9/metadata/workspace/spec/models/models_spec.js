{"filter":false,"title":"models_spec.js","tooltip":"/spec/models/models_spec.js","undoManager":{"mark":10,"position":10,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":20,"column":5},"action":"insert","lines":["var models = require(\"../../models/models\");","var Person = models.Person;","var Place = models.Place;","var db = require(\"../../config/db\");","describe(\"models\", function() {","  var ids = {};","  beforeEach(function(done) {","    db.connect(function() {","      models.seed(function(err, new_york, paris, london) {","        ids.new_yorkId = new_york._id;","        ids.parisId = paris._id;","        ids.londonId = london._id;","        done();","      });","    });","  });","  afterEach(function(done) {","    db.disconnect(function() {","      done();","    });","  });"]}]}],[{"group":"doc","deltas":[{"start":{"row":20,"column":5},"end":{"row":21,"column":0},"action":"insert","lines":["",""]},{"start":{"row":21,"column":0},"end":{"row":21,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":21,"column":2},"end":{"row":21,"column":5},"action":"insert","lines":["});"]},{"start":{"row":21,"column":0},"end":{"row":21,"column":2},"action":"remove","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":21,"column":3},"action":"remove","lines":["var models = require(\"../../models/models\");","var Person = models.Person;","var Place = models.Place;","var db = require(\"../../config/db\");","describe(\"models\", function() {","  var ids = {};","  beforeEach(function(done) {","    db.connect(function() {","      models.seed(function(err, new_york, paris, london) {","        ids.new_yorkId = new_york._id;","        ids.parisId = paris._id;","        ids.londonId = london._id;","        done();","      });","    });","  });","  afterEach(function(done) {","    db.disconnect(function() {","      done();","    });","  });","});"]},{"start":{"row":0,"column":0},"end":{"row":230,"column":3},"action":"insert","lines":["var models = require(\"../../models/models\");","var Person = models.Person;","var Thing = models.Thing;","var db = require(\"../../config/db\");","describe(\"models\", function() {","  var ids = {};","  beforeEach(function(done) {","    db.connect(function() {","      models.seed(function(","        err,","        new_york,","        paris,","        london) {","        ids.new_yorkId = new_york._id;","        ids.parisId = paris._id;","        ids.londonId = london._id;","        done();","      });","    });","  });","  afterEach(function(done) {","    db.disconnect(function() {","      done();","    });","  });","","  describe(\"Person\", function() {","    describe(\"acquire\", function() {","      describe(\"Moe gets two rocks and piece of paper\", function() {","        var things;","        var rockThing;","        var paperThing;","        var person;","","        var giveMoeTwoRocksAndAPairOfScissors = function(cb) {","          Person.acquire(ids.moeId, ids.rockId, function() {","            Person.acquire(ids.moeId, ids.rockId, function() {","              Person.acquire(ids.moeId, ids.paperId, function() {","                cb();","              });","            });","          });","        };","","        var getThingsFromMoe = function(moe) {","          return moe.things.map(","            function(thing) {","              return thing.name;","            }","          );","        };","        beforeEach(function(done) {","          giveMoeTwoRocksAndAPairOfScissors(function() {","            Thing.getOneByName(\"Rock\", function(err, _thing) {","              rockThing = _thing;","              Thing.getOneByName(\"Paper\", function(err, _thing) {","                paperThing = _thing","                Person.getOneByName(\"Moe\", function(err, _person) {","                  things = getThingsFromMoe(_person);","                  person = _person;","                  done();","                });","              });","            });","          });","        });","        it(\"Moe has three things\", function() {","          expect(person.things.length).toEqual(3)","        });","        it(\"Moe's numberOfthings is 3\", function() {","          expect(person.numberOfThings).toEqual(3);","        });","        it(\"Moe has a two rocks and paper\", function() {","          expect(things).toEqual([\"Rock\", \"Rock\", \"Paper\"]);","        });","        it(\"Rock is owned twice\", function() {","          expect(rockThing.numberOwned).toEqual(2);","        });","        it(\"There are 8 rocks left\", function() {","          expect(rockThing.numberInStock).toEqual(8);","        });","        it(\"There are 9 pieces of paper  left\", function() {","          expect(paperThing.numberInStock).toEqual(9);","        });","        describe(\"moe gives back a rock\", function() {","          beforeEach(function(done) {","            Person.returnThing(ids.moeId, ids.rockId, function() {","              Person.getOneByName(\"Moe\", function(err, _person) {","                things = getThingsFromMoe(_person);","                Thing.getOneByName(\"Rock\", function(err, _thing) {","                  rockThing = _thing;","                  done();","                });","              });","            });","          });","          it(\"moe has a rock and a piece of paper\", function() {","            expect(things).toEqual([\"Rock\", \"Paper\"]);","          });","          it(\"There are now 9 rocks in stock\", function() {","            expect(rockThing.numberInStock).toEqual(9);","          });","          it(\"One Rock is owned\", function() {","            expect(rockThing.numberOwned).toEqual(1);","          });","        });","        describe(\"moe gives back paper\", function() {","          var message;","          beforeEach(function(done) {","            Person.returnThing(ids.moeId, ids.scissorsId, function(err) {","              message = err.message;","              done();","            });","          });","          it(\"error is thrown\", function() {","            expect(message).toEqual(\"USER_DOES_NOT_OWN\");","          });","        });","        describe(\"There is no paper\", function() {","          beforeEach(function(done) {","            Thing.update({","              _id: ids.paperId","            }, {","              $set: {","                numberInStock: 0","              }","            }, done)","          });","          describe(\"Moe attempts to get paper\", function() {","            var message;","            beforeEach(function(done) {","              Person.acquire(ids.moeId, ids.paperId, function(err) {","                message = err.message;","                done();","              });","            });","            it(\"moe doesn't get to own paper\", function() {","              expect(message).toEqual(\"NONE_IN_STOCK\");","            });","          });","        });","      });","    });","    describe(\"getPersonByName\", function() {","      var person;","      beforeEach(function(done) {","        Person.getOneByName(\"Moe\", function(err, _person) {","          person = _person;","          done();","        });","      });","","      it(\"person is moe\", function() {","        expect(person.name).toEqual(\"Moe\");","      });","    });","","    describe(\"getPersonById\", function() {","      var person;","      beforeEach(function(done) {","        Person.getOneById(ids.moeId, function(err, _person) {","          person = _person;","          done();","        });","      });","      it(\"returns moe\", function() {","        expect(person.name).toEqual(\"Moe\");","      });","    }); //end getPersonById","","    describe(\"getAll\", function() {","      var people;","      beforeEach(function(done) {","        Person.getAll(function(err, _people) {","          people = _people.map(function(person) {","            return person.name;","          });","          done();","        });","      });","      it(\"return [curly, larry, moe]\", function() {","        expect(people).toEqual([\"Curly\", \"Larry\", \"Moe\"]);","      });","","    });","","  }); //end of person tests","  describe(\"Thing\", function() {","    describe(\"getOneByName\", function() {","      var thing;","      beforeEach(function(done) {","        Thing.getOneByName(\"Rock\", function(err, _thing) {","          thing = _thing;","          done();","        });","      });","","      it(\"is a rock\", function() {","        expect(thing.name).toEqual(\"Rock\");","      });","    }); //end of getOneByName","    describe(\"getOneById\", function() {","      var thing;","      beforeEach(function(done) {","        Thing.getOneById(ids.rockId, function(err, _thing) {","          thing = _thing;","          done();","        });","      });","      it(\"is a rock\", function() {","        expect(thing.name).toEqual(\"Rock\");","      });","    });","    describe(\"getAll\", function() {","      var things;","      beforeEach(function(done) {","        Thing.getAll(function(err, _things) {","          things = _things.map(function(thing) {","            return thing.name;","          });","          done();","        });","      });","      it(\"return [Paper, Rock, Scissors]\", function() {","        expect(things).toEqual([\"Paper\", \"Rock\", \"Scissors\"]);","      });","","    });","  }); //end of Thing","","});"]}]}],[{"group":"doc","deltas":[{"start":{"row":56,"column":35},"end":{"row":56,"column":36},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":56,"column":35},"end":{"row":56,"column":36},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":56,"column":35},"end":{"row":56,"column":36},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":66,"column":47},"end":{"row":66,"column":48},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":66,"column":47},"end":{"row":66,"column":48},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":67,"column":49},"end":{"row":67,"column":50},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":126,"column":20},"end":{"row":126,"column":21},"action":"insert","lines":[";"]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":123,"column":21},"end":{"row":123,"column":21},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1427922706892,"hash":"e05f43fb97850a4f78fe1a33a7c6d6ff7cfa6df1"}